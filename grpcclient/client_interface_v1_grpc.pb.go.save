// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrainiteClient is the client API for Grainite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrainiteClient interface {
	TopicAppend(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
}

type grainiteClient struct {
	cc grpc.ClientConnInterface
}

func NewGrainiteClient(cc grpc.ClientConnInterface) GrainiteClient {
	return &grainiteClient{cc}
}

func (c *grainiteClient) TopicAppend(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/grainite_client.Grainite/topicAppend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrainiteServer is the server API for Grainite service.
// All implementations must embed UnimplementedGrainiteServer
// for forward compatibility
type GrainiteServer interface {
	TopicAppend(context.Context, *AppendRequest) (*AppendResponse, error)
	mustEmbedUnimplementedGrainiteServer()
}

// UnimplementedGrainiteServer must be embedded to have forward compatible implementations.
type UnimplementedGrainiteServer struct {
}

func (UnimplementedGrainiteServer) TopicAppend(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicAppend not implemented")
}
func (UnimplementedGrainiteServer) mustEmbedUnimplementedGrainiteServer() {}

// UnsafeGrainiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrainiteServer will
// result in compilation errors.
type UnsafeGrainiteServer interface {
	mustEmbedUnimplementedGrainiteServer()
}

func RegisterGrainiteServer(s grpc.ServiceRegistrar, srv GrainiteServer) {
	s.RegisterService(&Grainite_ServiceDesc, srv)
}

func _Grainite_TopicAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrainiteServer).TopicAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grainite_client.Grainite/topicAppend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrainiteServer).TopicAppend(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grainite_ServiceDesc is the grpc.ServiceDesc for Grainite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grainite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grainite_client.Grainite",
	HandlerType: (*GrainiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "topicAppend",
			Handler:    _Grainite_TopicAppend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_interface_v1.proto",
}
